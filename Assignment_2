
using System;
using System.Collections.Generic;

namespace InventoryManagement
{
    // Represents an individual item in the inventory
    class Item
    {
        // Properties for ID, Name, Price, and Quantity
        public int ID { get; set; }
        public string Name { get; set; }
        public decimal Price { get; set; }
        public int Quantity { get; set; }

        // Constructor to initialize the item
        public Item(int id, string name, decimal price, int quantity)
        {
            ID = id;
            Name = name;
            Price = price;
            Quantity = quantity;
        }

        // Override ToString method
        public override string ToString()
        {
            return $"ID: {ID}, Name: {Name}, Price: {Price}, Quantity: {Quantity}";
        }
    }

    // Manages a collection of items
    class Inventory
    {
        private List<Item> items;

        // Constructor to initialize the items list
        public Inventory()
        {
            items = new List<Item>();
        }

        // Adds a new item to the inventory
        public void AddItem(Item newItem)
        {
            items.Add(newItem);
            Console.WriteLine("Item added successfully!");
        }

        // Displays all items in the inventory
        public void DisplayAllItems()
        {
            if (items.Count == 0)
            {
                Console.WriteLine("No items in the inventory.");
                return;
            }

            foreach (var item in items)
            {
                Console.WriteLine(item);
            }
        }

        // Find an item by its ID
        public Item FindItemById(int id)
        {
            return items.Find(item => item.ID == id);
        }

        // Updates an item's information
        public void UpdateItem(int id, string newName, decimal newPrice, int newQuantity)
        {
            var itemToUpdate = FindItemById(id);
            if (itemToUpdate != null)
            {
                itemToUpdate.Name = newName;
                itemToUpdate.Price = newPrice;
                itemToUpdate.Quantity = newQuantity;
                Console.WriteLine("Item updated successfully!");
            }
            else
            {
                Console.WriteLine("Item not found.");
            }
        }

        // Delete an item from the inventory
        public void DeleteItem(int id)
        {
            var itemToDelete = FindItemById(id);
            if (itemToDelete != null)
            {
                items.Remove(itemToDelete);
                Console.WriteLine("Item deleted successfully!");
            }
            else
            {
                Console.WriteLine("Item not found.");
            }
        }
    }

    // Main program class to interact with the user
    class Program
    {
        static void Main(string[] args)
        {
            var inventory = new Inventory();
            bool exit = false;

            while (!exit)
            {
                Console.WriteLine("Choose an option from 1-5:");
                Console.WriteLine("1. Add item");
                Console.WriteLine("2. Update item");
                Console.WriteLine("3. Delete item");
                Console.WriteLine("4. Display all items");
                Console.WriteLine("5. Exit");

                Console.Write("Enter your choice: ");
                string choice = Console.ReadLine();

                switch (choice)
                {
                    case "1":
                        AddNewItem(inventory);
                        break;
                    case "2":
                        UpdateExistingItem(inventory);
                        break;
                    case "3":
                        DeleteExistingItem(inventory);
                        break;
                    case "4":
                        inventory.DisplayAllItems();
                        break;
                    case "5":
                        exit = true;
                        Console.WriteLine("Exiting the application.");
                        break;
                    default:
                        Console.WriteLine("Invalid choice. Please try again.");
                        break;
                }
            }
        }

        // Add a new item to the inventory
        static void AddNewItem(Inventory inventory)
        {
            Console.Write("Enter ID: ");
            if (int.TryParse(Console.ReadLine(), out int id))
            {
                Console.Write("Enter name: ");
                string name = Console.ReadLine();
                if (string.IsNullOrWhiteSpace(name))
                {
                    Console.WriteLine("Invalid name.");
                    return;
                }

                Console.Write("Enter price: ");
                if (decimal.TryParse(Console.ReadLine(), out decimal price))
                {
                    Console.Write("Enter quantity: ");
                    if (int.TryParse(Console.ReadLine(), out int quantity))
                    {
                        inventory.AddItem(new Item(id, name, price, quantity));
                    }
                    else
                    {
                        Console.WriteLine("Invalid quantity.");
                    }
                }
                else
                {
                    Console.WriteLine("Invalid price.");
                }
            }
            else
            {
                Console.WriteLine("Invalid ID.");
            }
        }

        // Updates an existing item in the inventory
        static void UpdateExistingItem(Inventory inventory)
        {
            Console.Write("Enter the ID of the item to update: ");
            if (int.TryParse(Console.ReadLine(), out int id))
            {
                if (inventory.FindItemById(id) == null)
                {
                    Console.WriteLine("Item not found.");
                    return;
                }

                Console.Write("Enter new name: ");
                string newName = Console.ReadLine();
                if (string.IsNullOrWhiteSpace(newName))
                {
                    Console.WriteLine("Invalid name.");
                    return;
                }

                Console.Write("Enter new price: ");
                if (decimal.TryParse(Console.ReadLine(), out decimal newPrice))
                {
                    Console.Write("Enter new quantity: ");
                    if (int.TryParse(Console.ReadLine(), out int newQuantity))
                    {
                        inventory.UpdateItem(id, newName, newPrice, newQuantity);
                    }
                    else
                    {
                        Console.WriteLine("Invalid quantity.");
                    }
                }
                else
                {
                    Console.WriteLine("Invalid price.");
                }
            }
            else
            {
                Console.WriteLine("Invalid ID.");
            }
        }

        // Deletes an existing item from the inventory
        static void DeleteExistingItem(Inventory inventory)
        {
            Console.Write("Enter the ID of the item to delete: ");
            if (int.TryParse(Console.ReadLine(), out int id))
            {
                inventory.DeleteItem(id);
            }
            else
            {
                Console.WriteLine("Invalid ID.");
            }
        }
    }
}
